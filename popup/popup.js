// Khai b√°o bi·∫øn global ƒë·ªÉ theo d√µi ti·∫øn tr√¨nh
let imagesProcessed = 0;

chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {
  const tab = tabs[0];
  const statusEl = document.getElementById("status-message");
  const downloadBtn = document.getElementById("download-btn");
  
  if (tab.url && tab.url.includes("nhentaiworld")) {
    statusEl.textContent = "‚úÖ Ready to download!";
    downloadBtn.addEventListener("click", async () => {
      try {
        // Reset bi·∫øn ƒë·∫øm
        imagesProcessed = 0;
        statusEl.textContent = "üöÄ ƒêang t·∫£i ·∫£nh...";
        downloadBtn.disabled = true;
        
        // G·ª≠i message v√† nh·∫≠n d·ªØ li·ªáu ·∫£nh
        const response = await chrome.tabs.sendMessage(tab.id, { 
          action: "downloadNhentai",
          galleryUrl: tab.url
        });
        
        if (response?.success && response?.images?.length > 0) {
          statusEl.textContent = `üóúÔ∏è ƒêang n√©n ${response.images.length} ·∫£nh...`;
          console.log("B·∫Øt ƒë·∫ßu n√©n ZIP...");
          
          await createAndDownloadZip(response.images, response.folderName);
          
          statusEl.textContent = `‚úÖ ƒê√£ t·∫£i xu·ªëng ${response.images.length} ·∫£nh!`;
          console.log("T·∫£i xu·ªëng ho√†n t·∫•t!");
        } else {
          const errorMsg = response?.error || "Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o";
          statusEl.textContent = `‚ö†Ô∏è ${errorMsg}`;
          console.log("L·ªói:", errorMsg);
        }
      } catch (error) {
        console.error("L·ªói ch√≠nh:", error);
        statusEl.textContent = "‚ùå L·ªói khi x·ª≠ l√Ω: " + error.message;
      } finally {
        downloadBtn.disabled = false;
      }
    });
  } else {
    statusEl.textContent = "‚ö†Ô∏è Please open a NHentai gallery.";
    downloadBtn.disabled = true;
  }
});

async function createAndDownloadZip(images, folderName) {
  return new Promise(async (resolve, reject) => {
    try {
      const zip = new JSZip();
      const imgFolder = zip.folder(folderName);
      
      // Th√™m progress khi n√©n
      const totalImages = images.length;
      let processed = 0;
      
      // Th√™m t·ª´ng ·∫£nh v√†o ZIP
      for (const [index, imgData] of images.entries()) {
        const filename = `${folderName}_${(index + 1).toString().padStart(3, '0')}.jpg`;
        imgFolder.file(filename, imgData.data, { base64: true });
        processed++;
        
        // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh m·ªói 5 ·∫£nh
        if (processed % 5 === 0 || processed === totalImages) {
          document.getElementById("status-message").textContent = 
            `üóúÔ∏è ƒêang n√©n... (${processed}/${totalImages})`;
        }
      }
      
      // T·∫°o file ZIP
      const content = await zip.generateAsync({ 
        type: "blob",
        compression: "DEFLATE",
        compressionOptions: { level: 6 }
      });
      
      // T·∫£i xu·ªëng
      const url = URL.createObjectURL(content);
      await chrome.downloads.download({
        url: url,
        filename: `${folderName}.zip`,
        conflictAction: 'uniquify'
      });
      
      resolve();
    } catch (error) {
      reject(error);
    }
  });
}